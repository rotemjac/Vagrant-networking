# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    servers = {{ servers | safe }}
    network = {{ network | safe }}
    network_mode = network[:mode]

    servers.each do |machine|
      config.vm.define machine[:hostname] do |node|

        # Configure box and network
        node.vm.box = "{{ box }}"
        node.vm.hostname = machine[:hostname]

        {% if network   == 'bridge' %}                          node.vm.network "public_network",
        {% elif network == 'bridge_with_default_interface'%}     node.vm.network "public_network",  bridge: network[:bridge],
        {% elif network   == 'internal' %}                      node.vm.network "private_network", virtualbox__intnet: true,
        {% else %}                                              node.vm.network "private_network",
        {% endif %}


        ip: machine[:ip]

        node.vm.network :forwarded_port,
                guest: 22,
                host: machine[:ssh_port], # About this attribute: https://realguess.net/2015/10/06/overriding-the-default-forwarded-ssh-port-in-vagrant/
                id: "ssh"

        # First of all (and before the first machine is UP) - create destination folder
        node.trigger.before :up do |trigger|
          trigger.only_on = servers[0][:hostname] #first_vm
          trigger.run = {inline: "mkdir -p ./outputs/#{network_mode}"}
        end

        # Then run provision scripts
        node.vm.provision "shell", path: "./scripts/guest_script.sh"

         # Build the scp command to run on guest
         private_key_path = ".vagrant/machines/#{machine[:hostname]}/virtualbox/private_key"
         remote_vagrant_path = "vagrant@127.0.0.1:/vagrant"
         scp_command  = "scp -o StrictHostKeyChecking=no -i #{private_key_path} -P #{machine[:ssh_port]} #{remote_vagrant_path}/output.txt  ./outputs/#{network_mode}/#{machine[:hostname]}.txt"

         # Create guests output files
         node.trigger.after :up do |trigger|
             trigger.run = {inline: scp_command}
         end

         # Create host output file
         node.trigger.after :up do |trigger|
          trigger.only_on = servers[(servers.length) -1][:hostname] #last_vm
             trigger.run = {path: "./scripts/host_script.sh", args: "./outputs/#{network_mode}"}
         end
      end
    end
end